#!/usr/bin/env python

localrules: bwa_index_setup, postprocess_raw, postprocess_final, label_bins, bin_tig_mapping, metaTOR_split_hic2ctg, metaTOR_coverage, metaTOR_network, metaTOR_partition, metaTOR_validation, clust2bin, fasta_index

samp = config['sample']
if 'reads2' in config and not config['reads2'] == '':
	reads = [config['reads1'], config['reads2']]
else:
	reads = [config['reads1']]

if 'long_read' in config and config['long_read']:
	long_read = True
else:
	long_read = False

HiC_reads = config['HiC_reads']
enzyme = config['enzyme']

def get_bins(wildcards):
	outputs = checkpoints.clust2bin.get(**wildcards).output[0]
	return glob_wildcards(os.path.join(outputs, "{bin}.fa")).bin

rule all:
	input:
		reads,
		HiC_reads,
		config['assembly'],
		config['krakendb'],
		expand("{samp}/final/{samp}.tsv", samp = config['sample'])

rule bwa_index_setup:
	input:
		config['assembly']
	output:
		"{samp}/idx/{samp}.fa"
	resources:
		mem=1,
		time=1
	threads: 1
	params:
		asm = config['assembly']
	shell:
		"python3 /share/inspurStorage/home3/ZXMGroup/VIROME/G3compare/pipeline/bin3C/rename_fasta.py -i {params.asm} --pre contig_ -o {samp}/idx/{samp}.fa"

rule bwa_index:
	input:
		"{samp}/idx/{samp}.fa"
	output:
		"{samp}/idx/{samp}.fa.amb",
		"{samp}/idx/{samp}.fa.ann",
		"{samp}/idx/{samp}.fa.bwt",
		"{samp}/idx/{samp}.fa.pac",
		"{samp}/idx/{samp}.fa.sa"
	log:
		"{samp}/logs/bwa_index.log"
	resources:
		mem=8,
		time=2
	threads: 1
	shell: "/home1/jialh/tools/miniconda3/bin/bwa index {input}"

rule bwa_align:
	input:
		config['bamfile']
	log:
		"{samp}/logs/bwa_mem.log"
	output:
		"{samp}/{samp}.bam"
	resources:
		mem=16,
		time=12
	threads: 32
	shell:
		"/usr/bin/ln -s {input} {output}"

rule align_lr:
	input:
		"{samp}/idx/{samp}.fa",
		reads
	log:
		"{samp}/logs/align_lr.log"
	output:
		"{samp}/{samp}_lr.bam"
	resources:
		mem=48,
		time=6
	threads: 32
	shell:
		"/home1/jialh/tools/miniconda3/bin/minimap2 -t {threads} -ax map-ont {input} | /home1/jialh/tools/samtools-1.9/samtools sort -@ {threads} -o {output}"

rule map_HiC_reads_to_contigs:
    input:
        config['hic2contig']
    output:
        "{samp}/metaTOR/hic2ctg.bam"
    shell:
        "/usr/bin/ln -s {input} {output}"

rule metaTOR_split_hic2ctg:
    input:
        "{samp}/metaTOR/hic2ctg.bam"
    output:
        "{samp}/metaTOR_hic2ctg/{samp}.for.bam",
        "{samp}/metaTOR_hic2ctg/{samp}.rev.bam"
    shell:
        "/home1/jialh/tools/samtools-1.9/samtools view --threads 16 -F 16 -o {output[0]} {input}; "+
        "/home1/jialh/tools/samtools-1.9/samtools view --threads 16 -f 16 -o {output[1]} {input}"


rule metaTOR_coverage:
    input:
        config['bamfile']
    output:
        "{samp}/metaTOR_coverage/{samp}.coverage.txt",
        "{samp}/metaTOR_coverage/{samp}.pair.txt"
    shell:
        "/share/inspurStorage/home1/jialh/tools/miniconda3/bin/jgi_summarize_bam_contig_depths " +
        "--outputDepth {output[0]} --pairedContigs {output[1]} {input}"

rule metaTOR_network:
    input:
        "{samp}/metaTOR_hic2ctg/{samp}.for.bam",
        "{samp}/metaTOR_hic2ctg/{samp}.rev.bam",
        "{samp}/idx/{samp}.fa",
        "{samp}/metaTOR_coverage/{samp}.coverage.txt"
    output:
        "{samp}/metaTOR/contig_data_network.txt",
        "{samp}/metaTOR/network.txt"
    shell:
        "/home1/jialh/tools/miniconda3/envs/metaTOR/bin/metator network " +
        "-1 {input[0]} -2 {input[1]} -a  {input[2]} " +
        "-t 16 -S bam -e {enzyme}  -d {input[3]} -T {samp}/network_temp -o {samp}/metaTOR"

rule metaTOR_partition:
    input:
        "{samp}/metaTOR/contig_data_network.txt",
        "{samp}/metaTOR/network.txt",
        "{samp}/idx/{samp}.fa"
    output:
        "{samp}/metaTOR/contig_data_partition.txt",
        directory("{samp}/metaTOR/overlapping_bin")
    shell:
        "/home1/jialh/tools/miniconda3/envs/metaTOR/bin/metator partition " +
        "-c {input[0]} -n {input[1]} -a {input[2]} " +
        "-t 16 --size 200000 -F -T {samp}/partition_temp -o {samp}/metaTOR"

rule metaTOR_validation:
    input:
        "{samp}/metaTOR/contig_data_partition.txt",
        "{samp}/metaTOR/network.txt",
        "{samp}/idx/{samp}.fa"
    output:
        directory("{samp}/metaTOR/final_bin")
    shell:
        "/home1/jialh/tools/miniconda3/envs/metaTOR/bin/metator validation " +
        "-c {input[0]} -n {input[1]} -a {input[2]} -f {samp}/metaTOR/overlapping_bin " +
        "-t 16 --size 200000 -F  -T {samp}/validation_temp -o {samp}/metaTOR"

checkpoint clust2bin:
    input:
        "{samp}/metaTOR/final_bin"
    output:
        directory("{samp}/bins") #the number of bins is unknown prior to execution"
    shell:
        "cp -r {samp}/metaTOR/final_bin {samp}/bins; rename MetaTOR bin {samp}/bins/*.fa"

rule checkm:
	input:
		lambda wildcards: expand("{samp}/bins/{bin}.fa", bin = get_bins(wildcards), samp = wildcards.samp)
	output:
		"{samp}/checkm/checkm.tsv"
	log:
		"{samp}/logs/checkm.log"
	resources:
		mem=128,
		time=24
	threads: 16
	shell:
		"rm -rf {samp}/checkm/*; checkm lineage_wf -t {threads}" +" -x fa --tab_table -f {samp}/checkm/checkm.tsv {samp}/bins/ {samp}/checkm"

rule aragorn:
	input:
		"{samp}/bins/{bin}.fa"
	output:
		"{samp}/rna/trna/{bin}.fa.txt"
	log:
		"{samp}/logs/aragorn_{bin}.log"
	resources:
		mem=8,
		time=1
	shell:
		"/share/inspurStorage/home1/jialh/tools/miniconda3/bin/aragorn -t {input} -o {output}"

rule barrnap:
	input:
		"{samp}/bins/{bin}.fa"
	output:
		"{samp}/rna/rrna/{bin}.fa.txt"
	log:
		"{samp}/logs/barrnap_{bin}.log"
	resources:
		mem=8,
		time=1
	shell:
		"/share/inspurStorage/home1/jialh/tools/miniconda3/bin/barrnap {input} > {output}"

rule quast:
	input:
		"{samp}/bins/{bin}.fa"
	output:
		"{samp}/quast/{bin}.fa/report.txt"
	log:
		"{samp}/logs/quast_{bin}.log"
	resources:
		mem=8,
		time=1
	shell:
	    "/share/inspurStorage/home1/jialh/tools/miniconda3/envs/quast/bin/quast.py -o {samp}/quast/{wildcards.bin}.fa/ {input} " + "--contig-thresholds 0,10000,50000,100000,500000,1000000 --fast "

rule prokka:
	input:
		"{samp}/bins/{bin}.fa"
	output:
		"{samp}/prokka/{bin}.fa/{samp}_{bin}.fa.gff"
	log:
		"{samp}/logs/prokka_{bin}.log"
	resources:
		mem=48,
		time=1,
	threads: 8
	shell:
		"/share/inspurStorage/home1/jialh/tools/miniconda3/bin/prokka {input} --outdir {samp}/prokka/{wildcards.bin}.fa " +
		"--prefix {samp}_{wildcards.bin}.fa --centre X --compliant --force --cpus {threads} --noanno"

rule bam_idx:
	input:
		"{samp}/{samp}_lr.bam" if long_read else "{samp}/{samp}.bam" #choose a long read alignment or short read alignment
	output:
		"{samp}/{samp}_lr.bam.bai" if long_read else "{samp}/{samp}.bam.bai" #choose a long read alignment or short read alignment
	log:
		"{samp}/logs/bamidx.log"
	resources:
		mem=2,
		time=2
	shell:
		"/share/inspurStorage/home1/jialh/tools/samtools-1.9/samtools index {input}"

rule bam_idxstats:
	input:
		"{samp}/{samp}_lr.bam" if long_read else "{samp}/{samp}.bam", #choose a long read alignment or short read alignment,
		"{samp}/{samp}_lr.bam.bai" if long_read else "{samp}/{samp}.bam.bai", #choose a long read alignment or short read alignment,
	output:
		"{samp}/{samp}_lr.bam.bai.tsv" if long_read else "{samp}/{samp}.bam.bai.tsv", #choose a long read alignment or short read alignment,
	log:
		"{samp}/logs/bamidxstats.log"
	resources:
		mem=2,
		time=2
	shell:
		"/share/inspurStorage/home1/jialh/tools/samtools-1.9/samtools idxstats {input[0]} > {output}"

rule bin_idxstats:
	input:
		"{samp}/bins/{bin}.fa",
		"{samp}/{samp}_lr.bam.bai.tsv" if long_read else "{samp}/{samp}.bam.bai.tsv", #choose a long read alignment or short read alignment,
	output:
		"{samp}/coverage/raw/{bin}.tsv"
	log:
		"{samp}/logs/coverage_idxstats_{bin}.log"
	resources:
		mem=2,
		time=1
	shell:
	    "grep '>' {input[0]} | tr -d '>' | cut  -d ' ' -f 2 | cut  -d ':' -f 2 | xargs -I foo -n 1 grep -P 'foo\\t' {input[1]} > {output}"

rule bin_coverage:
	input:
		rules.bin_idxstats.output
	output:
		"{samp}/coverage/{bin}.txt"
	log:
		"{samp}/logs/coverage_{bin}.log"
	resources:
		mem=2,
		time=1
	params:
		read_length = config['read_length']
	script:
		"scripts/bin_coverage.py"

rule fasta_index:
	input:
		"{samp}/bins/{bin}.fa"
	output:
		"{samp}/bins/{bin}.fa.fai"
	log:
		"{samp}/logs/faidx_{bin}.log"
	resources:
		mem=8,
		time=1
	threads: 1
	shell:
		"/share/inspurStorage/home1/jialh/tools/samtools-1.9/samtools faidx {input}"

rule kraken:
	input:
		"{samp}/idx/{samp}.fa"
	output:
		"{samp}/classify/{samp}.tsv"
	log:
		"{samp}/logs/kraken_class.log"
	resources:
		mem=320,
		time=6
	shell:
		"/share/inspurStorage/home1/jialh/tools/miniconda3/bin/kraken2 --db {krak} ".format(krak = config['krakendb']) +
		"--threads {threads} --output {output[0]} --use-names " +
		" {input} "

rule label_bins:
	input:
		rules.kraken.output,
		lambda wildcards: expand(rules.fasta_index.output, bin = get_bins(wildcards), samp = wildcards.samp)
	output:
		"{samp}/classify/bin_species_calls.tsv"
	log:
		"{samp}/logs/assign_species.log"
	script:
		"scripts/assign_species.py"

rule postprocess_raw:
	input:
		rules.checkm.output,
		lambda wildcards: expand(rules.prokka.output, bin = get_bins(wildcards), samp = wildcards.samp),
		lambda wildcards: expand(rules.quast.output, bin = get_bins(wildcards), samp = wildcards.samp),
		lambda wildcards: expand(rules.aragorn.output, bin = get_bins(wildcards), samp = wildcards.samp),
		lambda wildcards: expand(rules.barrnap.output, bin = get_bins(wildcards), samp = wildcards.samp),
		lambda wildcards: expand(rules.bin_coverage.output, bin = get_bins(wildcards), samp = wildcards.samp),
		rules.label_bins.output
	output:
		"{samp}/final/prokka.tmp",
		"{samp}/final/quast.tmp",
		"{samp}/final/checkm.tmp",
		"{samp}/final/trna.tmp",
		"{samp}/final/rrna.tmp",
		"{samp}/final/classify.tmp",
		"{samp}/final/coverage.tmp",
	log:
		"{samp}/logs/postprocess.log"
	resources:
		mem=2,
		time=1
	shell:
		"(echo 'Sample Bin Coverage' | tr ' ' '\t'; " +
			"cat {samp}/coverage/*.txt) > {samp}/final/coverage.tmp; " +
		"(echo 'Sample Bin Genes' | tr ' ' '\t'; \
			find {samp}/prokka/ -name '*.gff' | xargs grep -c CDS | cut -f4 -d '/' | sed 's/.fa.gff:/\t/g' | sed 's/{samp}_/{samp}\t/g' | sort -k2,2g) > {samp}/final/prokka.tmp; " + \
		"find {samp}/quast/ -name 'transposed_report.tsv' | xargs cat | sort -u | sed 's/^\(b..\)/{samp}\t\\1/g' | sed 's/^Assembly/Sample\tBin/g' > {samp}/final/quast.tmp; " + \
		"cat {samp}/checkm/checkm.tsv " + " | sed 's/^\(b..\)/{samp}\t\\1/g' | sed 's/^Bin Id/Sample\tBin/g' > {samp}/final/checkm.tmp; " + \
		"(echo 'Sample Bin tRNA' | tr ' ' '\\t'; \
			ls {samp}/rna/trna/ | xargs -n 1 -I foo sh -c \"grep 'Number of' {samp}/rna/trna/foo | cut -f2 -d= | tr -d ' ' | tr '\\n' '+' | sed 's/+$//g' | xargs echo | bc | sed 's/^/foo\\t/g' \" | sed 's/^/{samp}\\t/g' | sed 's/.fa.txt//g') > {samp}/final/trna.tmp; " +
		"(echo 'Sample Bin rna.16S rna.23S rna.5S' | tr ' ' '\t'; \
			paste \
			<(grep -c 16S {samp}/rna/rrna/* | sed 's/\/rna\/rrna\//\t/g' | sed 's/.fa.txt:/\t/g') \
			<(grep -c 23S {samp}/rna/rrna/* | sed 's/\/rna\/rrna\//\t/g' | sed 's/.fa.txt:/\t/g' | cut -f3) \
			<(grep -c 5S {samp}/rna/rrna/* | sed 's/\/rna\/rrna\//\t/g' | sed 's/.fa.txt:/\t/g' | cut -f3) \
			) > {samp}/final/rrna.tmp; " + \
		"(echo 'Sample Bin Majority.Class Majority.Fraction Size.Mb Final.Class' | tr ' ' '\t'; " +
			"cat {samp}/classify/bin_species_calls.tsv" + " | sed 's/\.fa//g' | sed 's/^/{samp}\t/g') > {samp}/final/classify.tmp;"
#grep Total {samp}/rna/trna/* | sed 's/\/rna\/trna\//\\t/g' | sed 's/.fa.txt:Total tRNA genes = /\\t/g') > {samp}/final/trna.tmp; " + \

rule postprocess_final:
	input:
		rules.postprocess_raw.output
	output:
		"{samp}/final/{samp}.tsv"
	log:
		"{samp}/logs/postprocess.log"
	script:
		"scripts/join_final_tables.R"

rule bin_tig_mapping:
	input: rules.postprocess_final.output
	output: '{samp}/final/bin_tig_mapping.tsv'
	shell:
		"ls {samp}/bins/ | grep fai  | xargs -n 1 -I foo sh -c \"cat {samp}/bins/foo | sed 's/^/foo\t/g' \" | sed 's/.fa.fai//g' | cut -f1,2 > {output}"