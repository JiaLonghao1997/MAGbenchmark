#!/usr/bin/env python

import os

localrules: faidx, stage_assemblies, assembly_alignment_filter, bwa_index, highlight_alignments, circos

#parse the provided assemblies
condtp_asm = {}
with open(config['assemblies']) as asmf:
	basedir = '.'
	for l in asmf.readlines():
		s = l.split("\t")
		if len(s) == 1 or s[0].startswith('#'):
			continue
		asm = os.path.join(basedir, s[0]) #assembly filepath (relative to basedir, which is the current directory)
		cond = s[1] #the two variables cond and tp, corresponding to the second and third columns in the input table,
		tp = s[2].strip() #define how the various tracks in the final circos plot are arranged.
		condtp = "_".join([cond, tp])
		condtp_asm[condtp] = asm

aligned_filenames = [c for c in condtp_asm]
assembly_files = [condtp_asm[k] for k in condtp_asm]
print(condtp_asm)

rule targets:
	input:
		'circos/circos.pdf',
		config['reference'],
		config['dark_contigs'],
		config['highlight_sequences'],
		config['highlight_intensities'],
		config['assemblies']

rule faidx:
#index a fasta file for fast subsequence retrieval and sequence size information
	input:
		config['reference']
	output:
		"{ref}.fai".format(ref =config['reference'])
	shell:
		"/home1/jialh/tools/samtools-1.9/samtools faidx {input}"

#set up a symlink for each input assembly encoded with the timepoint and condition
rule stage_assemblies:
	input:
		#When this file is parsed, the wildcard value is unknown. So in order to index into this dictionary,
		#a lambda function delays retrieval of the value until job dependencies (and wildcard values)
		#are resolved.
		lambda wildcards: condtp_asm[wildcards.f]
	output:
		"assemblies/{f}.fa"
	shell:
		"cp {input} {output}"

#Assembly alignments to reference with nucmer
rule assembly_alignment:
	input:
		config['reference'],
		rules.stage_assemblies.output
	output:
		"aligned/{f}.coords"
	shell:
		"/home3/ZXMGroup/VIROME/G3compare/data/PRJNA380276/nano_results/quickmerge/MUMmer3.23/nucmer {input[0]} assemblies/{wildcards.f}.fa -p aligned/{wildcards.f}; " +
			"/home3/ZXMGroup/VIROME/G3compare/data/PRJNA380276/nano_results/quickmerge/MUMmer3.23/delta-filter -1 aligned/{wildcards.f}.delta > aligned/{wildcards.f}.delta.filt; " +
			"/home3/ZXMGroup/VIROME/G3compare/data/PRJNA380276/nano_results/quickmerge/MUMmer3.23/show-coords aligned/{wildcards.f}.delta.filt -T > aligned/{wildcards.f}.coords; "

#remove gaps under a specified size, provided they occur within adjacent regions of the same contigs
rule assembly_alignment_filter:
	input:
		rules.assembly_alignment.output
	output:
		"aligned/{f}.bed"
	params:
		gap_width = "25000",
	script:
		"/home3/ZXMGroup/VIROME/G3compare/pipeline/assembly_comparison_circos/scripts/coord_filter.py"

#create a BWA index
rule bwa_index:
	input:
		config['reference']
	output:
		"bwa_idx/ref.fa",
		"bwa_idx/ref.fa.amb",
		"bwa_idx/ref.fa.ann",
		"bwa_idx/ref.fa.bwt",
		"bwa_idx/ref.fa.pac",
		"bwa_idx/ref.fa.sa"
	resources:
		mem=1,
		time=1
	threads: 1
	shell:
		"cp {input} bwa_idx/ref.fa; /home1/jialh/tools/miniconda3/bin/bwa index bwa_idx/ref.fa"


#16S (highlight sequence) alignments
rule highlight_alignments:
	input:
		"bwa_idx/ref.fa",
		config['highlight_sequences']
	output:
		"highlighted/highlights.bed"
	shell:
		"/home1/jialh/tools/miniconda3/bin/bwa mem {input} -a > highlighted/highlights.sam;" +
		"/home1/jialh/tools/samtools-1.9/samtools view highlighted/highlights.sam -F4 | cut -f1,3,4 | \
		sort -u -k1,1 | awk '{{print $2, $3, $3 + 1000, $1}}' > {output}" #| cut -f1,3,4 #|awk '{{print $2, $3, $3 + 1000, $1}}' > {output}"
		##grep NM:i:0 |

#generate a circos plot!
rule circos:
	input:
		rules.faidx.output,
		config['dark_contigs'],
		rules.highlight_alignments.output,
		config['highlight_intensities'],
		expand("aligned/{f}.bed", f = aligned_filenames)
	params:
		outer_track_col = config['outer_track_color']
	output:
		"circos/circos.pdf"
	script:
		"/home3/ZXMGroup/VIROME/G3compare/pipeline/assembly_comparison_circos/scripts/scripts/circos.R"
